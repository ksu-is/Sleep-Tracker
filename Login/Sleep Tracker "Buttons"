#Help use choose which part of the sleep tracker to go to

import tkinter as tk
from tkinter import messagebox, scrolledtext
import os
import datetime

def open_sleep_tracker():
    messagebox.showinfo("Sleep Tracker", "Opening Sleep Tracker...")

def open_mood_tracker():
    messagebox.showinfo("Mood Tracker", "Opening Mood Tracker...")

def open_journal():
    messagebox.showinfo("Journal", "Opening Journal...")

# 4.15 Updated Journal Entry Page to add ways for user to journal and save their entry

def open_journal():
    journal_window = tk.Toplevel()
    journal_window.title("Journal Entry")
    journal_window.geometry("600x500")
    journal_window.configure(bg="#222831")

    # Title label
    title_label = tk.Label(journal_window, text="Your Journal", font=("Helvetica", 18, "bold"), fg="#eeeeee", bg="#222831")
    title_label.pack(pady=10)

    # Text area
    text_area = scrolledtext.ScrolledText(journal_window, wrap=tk.WORD, font=("Helvetica", 12), width=60, height=10)
    text_area.pack(pady=10)

    # Save entry
    def save_entry():
        entry_text = text_area.get("1.0", tk.END).strip()
        if not entry_text:
            messagebox.showerror("Error", "Your journal entry is empty.")
            return
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H-%M-%S") #Added new knowledge about .strftime. Controllable timestamp! KYLENNN This is so cool!
        filename = "journal_entries.txt"
        with open(filename, "a") as file:
            file.write("Entry at " + timestamp + "\n")
            file.write(entry_text + "\n")
            file.write("----\n")
        text_area.delete("1.0", tk.END)
        messagebox.showinfo("Saved", "Your entry has been saved.")
        update_archive()

    # Burn entry
    def burn_entry():
        text_area.delete("1.0", tk.END) #Looked into tkinter more... It's interesting how expansive this library is! Hopefully this works well
        messagebox.showinfo("Burned", "Your entry has been burned and erased.")

    # Archive section
    archive_label = tk.Label(journal_window, text="Journal Archive", font=("Helvetica", 14, "bold"), fg="#eeeeee", bg="#222831")
    archive_label.pack(pady=5)

    archive_listbox = tk.Listbox(journal_window, font=("Helvetica", 11), width=60)
    archive_listbox.pack(pady=5)

    # Load archive
    def update_archive():
        archive_listbox.delete(0, tk.END)
        if os.path.exists("journal_entries.txt"):
            with open("journal_entries.txt", "r") as file:
                lines = file.readlines()
                for line in lines:
                    if line.startswith("Entry at"):
                        archive_listbox.insert(tk.END, line.strip())

    # View selected entry
    def view_entry():
        selected = archive_listbox.curselection()
        if not selected:
            messagebox.showerror("Error", "Please select an entry to view.")
            return
        timestamp = archive_listbox.get(selected[0])
        found = False
        entry_content = ""
        with open("journal_entries.txt", "r") as file:
            lines = file.readlines()
            for line in lines:
                if line.strip() == timestamp:
                    found = True
                    continue
                if found:
                    if line.strip() == "----":
                        break
                    entry_content += line
        messagebox.showinfo(timestamp, entry_content)

    view_button = tk.Button(journal_window, text="View Selected Entry", font=("Helvetica", 11), bg="#00adb5", fg="white", command=view_entry)
    view_button.pack(pady=5)

    # Buttons frame
    buttons_frame = tk.Frame(journal_window, bg="#222831")
    buttons_frame.pack(pady=10)

    save_button = tk.Button(buttons_frame, text="Save Entry", font=("Helvetica", 13), bg="#00adb5", fg="white", command=save_entry)
    save_button.grid(row=0, column=0, padx=10)

    burn_button = tk.Button(buttons_frame, text="Burn It ðŸ”¥", font=("Helvetica", 13), bg="#ff5722", fg="white", command=burn_entry)
    burn_button.grid(row=0, column=1, padx=10)

    update_archive()

#For Journal Entry Still need to
 # Delete Archived messages aka burn it
 # Make things look nicer... if have time.

def open_night_music():
    messagebox.showinfo("Night Music", "Opening Night Music...")

def open_weekly_goals():
    messagebox.showinfo("Weekly Goals", "Opening Weekly Goals...")

# Create main window
root = tk.Tk()
root.title("Sleep Tracker - Main Menu")
root.geometry("400x500")
root.configure(bg="#222831")

# Title label
title_label = tk.Label(root, text="Welcome to Your Sleep Tracker!", 
                       font=("Helvetica", 18, "bold"), fg="#eeeeee", bg="#222831")
title_label.pack(pady=30)

# Sleep Tracker button
sleep_button = tk.Button(root, text="1 - Sleep Tracker", font=("Helvetica", 14), 
                         bg="#00adb5", fg="white", padx=20, pady=10, command=open_sleep_tracker)
sleep_button.pack(pady=10)

# Mood Tracker button
mood_button = tk.Button(root, text="2 - Mood Tracker", font=("Helvetica", 14), 
                        bg="#00adb5", fg="white", padx=20, pady=10, command=open_mood_tracker)
mood_button.pack(pady=10)

# Journal button
journal_button = tk.Button(root, text="3 - Journal", font=("Helvetica", 14), 
                           bg="#00adb5", fg="white", padx=20, pady=10, command=open_journal)
journal_button.pack(pady=10)

# Night Music button
music_button = tk.Button(root, text="4 - Night Music", font=("Helvetica", 14), 
                         bg="#00adb5", fg="white", padx=20, pady=10, command=open_night_music)
music_button.pack(pady=10)

# Weekly Goals button
goals_button = tk.Button(root, text="5 - Weekly Goals", font=("Helvetica", 14), 
                         bg="#00adb5", fg="white", padx=20, pady=10, command=open_weekly_goals)
goals_button.pack(pady=10)

# Run the window
root.mainloop()
