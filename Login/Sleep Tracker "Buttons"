#Login/Register Screen for user

import tkinter as tk
from tkinter import messagebox

# Test storage for user accounts
user_accounts = {}

def create_account():
    username = username_entry.get()
    password = password_entry.get()
    
    if username in user_accounts:
        messagebox.showerror("Error", "Username already exists.")
    elif not username or not password:
        messagebox.showerror("Error", "Please fill out both fields.")
    else:
        user_accounts[username] = password
        messagebox.showinfo("Success", "Account created for " + username + "!")

def login():
    username = username_entry.get()
    password = password_entry.get()
    
    if username in user_accounts and user_accounts[username] == password:
        messagebox.showinfo("Welcome", "Welcome back, " + username + "!")
        root.destroy()  # Would transition to main app
    else:
        messagebox.showerror("Error", "Invalid username or password.")

# Create main window
root = tk.Tk()
root.title("Sleep Tracker - Login")
root.geometry("400x400")
root.configure(bg="#393e46")

# Title label
title_label = tk.Label(root, text="Sleep Tracker", 
                       font=("Helvetica", 20, "bold"), fg="#eeeeee", bg="#393e46")
title_label.pack(pady=20)

# Username label + entry
username_label = tk.Label(root, text="Username", font=("Helvetica", 12), fg="#eeeeee", bg="#393e46")
username_label.pack(pady=5)
username_entry = tk.Entry(root, font=("Helvetica", 12))
username_entry.pack(pady=5)

# Password label + entry
password_label = tk.Label(root, text="Password", font=("Helvetica", 12), fg="#eeeeee", bg="#393e46")
password_label.pack(pady=5)
password_entry = tk.Entry(root, font=("Helvetica", 12), show="*")
password_entry.pack(pady=5)

# Login button
login_button = tk.Button(root, text="Login", font=("Helvetica", 12), bg="#00adb5", fg="white", command=login)
login_button.pack(pady=10)

# Create Account button
create_button = tk.Button(root, text="Create Account", font=("Helvetica", 12), bg="#00adb5", fg="white", command=create_account)
create_button.pack(pady=5)

# Run the window
root.mainloop()

#Help use choose which part of the sleep tracker to go to
#pip install pandas

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pandas as pd
from datetime import datetime

# DataFrame to store sleep entries
df_sleep = pd.DataFrame(columns=["Sleep Start", "Sleep End", "Sleep Type"])

# Define nighttime based on hour
def is_nighttime(hour):
    return hour >= 21 or hour < 7

# Function to add entry from user input
def add_sleep():
    global df_sleep
    start_str = start_entry.get()
    end_str = end_entry.get()

    try:
        sleep_start = datetime.strptime(start_str, "%Y-%m-%d %H:%M")
        sleep_end = datetime.strptime(end_str, "%Y-%m-%d %H:%M")

        if sleep_end <= sleep_start:
            messagebox.showerror("Error", "Sleep end must be after sleep start.")
            return

        sleep_type = "nighttime" if is_nighttime(sleep_start.hour) else "nap"
        duration_hours = round((sleep_end - sleep_start).total_seconds() / 3600, 2)

        df_sleep.loc[len(df_sleep)] = [sleep_start, sleep_end, sleep_type]

        # Add to tree view
        tree.insert("", "end", values=(
            sleep_start.strftime("%Y-%m-%d %H:%M"),
            sleep_end.strftime("%Y-%m-%d %H:%M"),
            duration_hours
        ))

        start_entry.delete(0, tk.END)
        end_entry.delete(0, tk.END)
        messagebox.showinfo("Success", "Entry added.")
    except ValueError:
        messagebox.showerror("Format Error", "Please use format: YYYY-MM-DD HH:MM")

# GUI Setup
root = tk.Tk()
root.title("Manual Sleep Tracker")

frame = tk.Frame(root)
frame.pack(padx=10, pady=10)

tk.Label(frame, text="Sleep Start (YYYY-MM-DD HH:MM):").grid(row=0, column=0, sticky="w")
start_entry = tk.Entry(frame, width=25)
start_entry.grid(row=0, column=1)

tk.Label(frame, text="Sleep End (YYYY-MM-DD HH:MM):").grid(row=1, column=0, sticky="w")
end_entry = tk.Entry(frame, width=25)
end_entry.grid(row=1, column=1)

add_button = tk.Button(frame, text="Add Sleep Entry", command=add_sleep)
add_button.grid(row=2, column=0, columnspan=2, pady=5)

tree = ttk.Treeview(root, columns=("Start", "End", "Duration"), show="headings")
tree.heading("Start", text="Sleep Start")
tree.heading("End", text="Sleep End")
tree.heading("Duration", text="Duration (hrs)")
tree.pack(padx=10, pady=10, fill="both", expand=True)

scrollbar = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
tree.configure(yscroll=scrollbar.set)
scrollbar.pack(side="right", fill="y")

root.mainloop()

def open_journal():
    messagebox.showinfo("Journal", "Opening Journal...")

# 4.17 Updated Journal Entry Page to add ways for user to journal and save their entry

def save_entry():
    entry_text = text_area.get("1.0",tk.END).strip() # Get user text
    if entry_text:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H-%M-%S") # learned about tkinter timestamp library
        with open("journal_entries.txt", "a") as file:
            write.file(timestamp + ": " + entry_tet + "\n")
        print("Entry Saved!")
        text_area.delete("1.0",tk.END) # Clear entry after saving to an archive
    else:
        print("No entry to save. Please write an entry!")

# Save entry to a file
def save_entry():
    entry = text_area.get("1.0", tk.END).strip()
    if entry:
        file = open("journal.txt", "a")
        file.write(entry + "\n")
        file.close()
        listbox.insert(tk.END, entry)  # Add to archive list
        text_area.delete("1.0", tk.END)
        print("Entry saved.")
    else:
        print("Please type something!")

# Delete selected entry from the list
def delete_entry():
    selected = listbox.curselection()
    if selected:
        listbox.delete(selected[0])
        print("Entry deleted.")

# Window
window = tk.Tk()
window.title("Simple Journal")

# Text area
text_area = tk.Text(window, width=40, height=5)
text_area.pack(pady=10)

# Save button
save_button = tk.Button(window, text="Save Entry", command=save_entry)
save_button.pack()

# Archive list
listbox = tk.Listbox(window, width=40, height=6)
listbox.pack(pady=10)

# Delete button
delete_button = tk.Button(window, text="Delete Selected", command=delete_entry)
delete_button.pack()

window.mainloop()

#For Journal Entry Still need to
 # Archived saved messages
 # Delete Archived messages aka burn it
 # Make things look nicer... if have time.

def open_weekly_goals():
    messagebox.showinfo("Weekly Goals", "Opening Weekly Goals...")

# Create main window
root = tk.Tk()
root.title("Sleep Tracker - Main Menu")
root.geometry("400x500")
root.configure(bg="#222831")

# Title label
title_label = tk.Label(root, text="Welcome to Your Sleep Tracker!", 
                       font=("Helvetica", 18, "bold"), fg="#eeeeee", bg="#222831")
title_label.pack(pady=30)

# Sleep Tracker button
sleep_button = tk.Button(root, text="1 - Sleep Tracker", font=("Helvetica", 14), 
                         bg="#00adb5", fg="white", padx=20, pady=10, command=open_sleep_tracker)
sleep_button.pack(pady=10)


# Journal button
journal_button = tk.Button(root, text="3 - Journal", font=("Helvetica", 14), 
                           bg="#00adb5", fg="white", padx=20, pady=10, command=open_journal)
journal_button.pack(pady=10)

# Weekly Goals button
goals_button = tk.Button(root, text="5 - Weekly Goals", font=("Helvetica", 14), 
                         bg="#00adb5", fg="white", padx=20, pady=10, command=open_weekly_goals)
goals_button.pack(pady=10)

# Run the window
root.mainloop()

#Log Out Button with Confirmation
def log_off_confirmation():
    confirmation = messagebox.askyesno("Confirm Action", "Are you sure you want to log off?")
    if confirmation:
        log_off()
        
def log_off():
    main_screen.withdraw()
    login_window.deiconify()

# Log Off button (with confirmation)
log_off_button = tk.Button(main_screen, text="Log Off", command=show_confirmation)
log_off_button.pack(pady=10)

# Start with the login screen visible
login_window.mainloop()

# Will find how to put buttons on this...
